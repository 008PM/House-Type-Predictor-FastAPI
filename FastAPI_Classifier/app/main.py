from fastapi import FastAPI, HTTPException, UploadFile, File, Form
from fastapi.responses import FileResponse
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from typing import Optional
import joblib
import json
import os

# Import the AI generator
from .ai_report_generator import AIReportGenerator

# -------------------------------
# Load both models
# -------------------------------
BASE_DIR = os.path.dirname(os.path.abspath(__file__))
MODEL_DIR = os.path.join(BASE_DIR, "model")

try:
    model_room_type = joblib.load(os.path.join(MODEL_DIR, "room_type_predictor.joblib"))
except Exception as e:
    raise RuntimeError(f"‚ùå Error loading room_type_predictor.joblib: {e}")

try:
    model_room_load = joblib.load(os.path.join(MODEL_DIR, "room_load_predictor.joblib"))
except Exception as e:
    raise RuntimeError(f"‚ùå Error loading room_load_predictor.joblib: {e}")

# -------------------------------
# Initialize FastAPI
# -------------------------------
app = FastAPI(
    title="BKW AI Planning Assistant API",
    description=(
        "AI-powered building planning API with:\n"
        "1Ô∏è‚É£ `/predict` ‚Äî Predicts Room_Type_No\n"
        "2Ô∏è‚É£ `/predict-load` ‚Äî Predicts Heating & Cooling loads\n"
        "3Ô∏è‚É£ `/generate_report` ‚Äî AI-powered report generation with Claude Sonnet 4.5\n"
        "4Ô∏è‚É£ `/estimate-costs` ‚Äî AI-powered cost estimation (fast, JSON response)"
    ),
    version="2.0"
)

# -------------------------------
# Configure CORS for Next.js Frontend
# -------------------------------
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In Produktion: Ihre Next.js Domain eintragen
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# -------------------------------
# Define input schemas
# -------------------------------
class RoomFeatures(BaseModel):
    volume_m3: float
    area_m2: float
    total_heating_load_kw: float

class ReportRequest(BaseModel):
    project_name: str
    location: str
    project_type: str
    federal_state: str

class CostEstimationRequest(BaseModel):
    project_name: str
    location: str
    project_type: str
    federal_state: str
    total_area_m2: float
    number_of_rooms: Optional[int] = None
    building_height_m: Optional[float] = None

# -------------------------------
# Root endpoint for health check
# -------------------------------
@app.get("/")
def root():
    """
    Health check endpoint - verifies API is running
    """
    return {
        "status": "online",
        "message": "BKW AI Planning Assistant API",
        "version": "2.0",
        "ai": "Powered by Claude Sonnet 4.5",
        "endpoints": {
            "predict_room_type": "/predict",
            "predict_load": "/predict-load",
            "generate_report": "/generate_report (AI-powered)",
            "estimate_costs": "/estimate-costs (AI-powered)",
            "docs": "/docs"
        }
    }

# -------------------------------
# 1Ô∏è‚É£ Predict Room Type Endpoint
# -------------------------------
@app.post("/predict", summary="Predict Room Type Number")
def predict_room_type(features: RoomFeatures):
    """
    Predict `Room_Type_No` from:
    - volume_m3
    - area_m2
    - total_heating_load_kw
    """
    try:
        input_data = [[
            features.volume_m3,
            features.area_m2,
            features.total_heating_load_kw
        ]]
        prediction = model_room_type.predict(input_data)
        return {"Room_Type_No": int(prediction[0])}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Prediction error: {e}")

# -------------------------------
# 2Ô∏è‚É£ Predict Load Endpoint
# -------------------------------
@app.post("/predict-load", summary="Predict Heating and Cooling Load")
def predict_room_load(features: RoomFeatures):
    """
    Predict:
    - Heating_W_per_m2
    - Cooling_W_per_m2
    from:
    - volume_m3
    - area_m2
    - total_heating_load_kw
    """
    try:
        input_data = [[
            features.volume_m3,
            features.area_m2,
            features.total_heating_load_kw
        ]]
        output = model_room_load.predict(input_data)[0]  # expect 2 outputs
        return {
            "Heating_W_per_m2": float(output[0]),
            "Cooling_W_per_m2": float(output[1])
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Load prediction error: {e}")

# -------------------------------
# 3Ô∏è‚É£ AI Report Generation Endpoint
# -------------------------------
@app.post("/generate_report", summary="Generate AI-Powered Report")
async def generate_ai_report(
    request: str = Form(...),
    room_book: Optional[UploadFile] = File(None),
    cost_estimate: Optional[UploadFile] = File(None),
    export_format: str = Form("docx")
):
    """
    Generate AI-powered Erl√§uterungsbericht using Claude Sonnet 4.5
    
    ü§ñ Powered by Anthropic Claude API
    
    **Required (as JSON in 'request' field):**
    ```json
    {
        "project_name": "Neubau Zentrale Muster GmbH",
        "location": "Stuttgart, Baden-W√ºrttemberg",
        "project_type": "office",
        "federal_state": "Baden-W√ºrttemberg"
    }
    ```
    
    **Optional files:**
    - room_book: Excel file with room data
    - cost_estimate: Excel file with cost data
    
    **Export format:** "docx" (default) or "markdown"
    """
    try:
        # Parse request
        req_data = json.loads(request)
        req = ReportRequest(**req_data)
        
        print(f"\n{'='*60}")
        print(f"üöÄ Starting AI Report Generation")
        print(f"   Project: {req.project_name}")
        print(f"   Type: {req.project_type}")
        print(f"{'='*60}\n")
        
        # Initialize AI generator
        try:
            generator = AIReportGenerator(
                project_name=req.project_name,
                location=req.location,
                project_type=req.project_type,
                federal_state=req.federal_state
            )
        except ValueError as e:
            raise HTTPException(
                status_code=500,
                detail=f"{str(e)} - Please set ANTHROPIC_API_KEY environment variable"
            )
        
        # Load optional data files
        if room_book:
            generator.load_room_book(room_book)
        if cost_estimate:
            generator.load_cost_estimate(cost_estimate)
        
        # Generate report with AI
        report = generator.generate_report()
        
        # Export in requested format
        if export_format == "markdown":
            file_path = generator.export_markdown(report)
            media_type = "text/markdown"
        else:  # docx
            file_path = generator.export_docx(report)
            media_type = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        
        filename = os.path.basename(file_path)
        
        print(f"\n{'='*60}")
        print(f"‚úÖ Report Generation Complete!")
        print(f"   File: {filename}")
        print(f"{'='*60}\n")
        
        return FileResponse(
            file_path,
            filename=filename,
            media_type=media_type
        )
    
    except json.JSONDecodeError:
        raise HTTPException(status_code=400, detail="Invalid JSON in request field")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Report generation error: {e}")

# -------------------------------
# 4Ô∏è‚É£ AI Cost Estimation Endpoint
# -------------------------------
@app.post("/estimate-costs", summary="AI-powered Cost Estimation")
async def estimate_costs(request: CostEstimationRequest):
    """
    Generate AI-powered cost estimation for TGA (Technical Building Equipment)
    
    ü§ñ Uses Claude Sonnet 4.5 for intelligent cost calculation
    
    Returns detailed cost breakdown by cost groups (KG 410, 420, 430, 440, 470, 480)
    
    **Example Request:**
    ```json
    {
        "project_name": "B√ºrogeb√§ude Muster GmbH",
        "location": "M√ºnchen, Bayern",
        "project_type": "office",
        "federal_state": "Bayern",
        "total_area_m2": 1500.0,
        "number_of_rooms": 50,
        "building_height_m": 12.0
    }
    ```
    """
    try:
        print(f"\n{'='*60}")
        print(f"üí∞ Starting AI Cost Estimation")
        print(f"   Project: {request.project_name}")
        print(f"   Area: {request.total_area_m2} m¬≤")
        print(f"{'='*60}\n")
        
        # Initialize AI generator
        try:
            generator = AIReportGenerator(
                project_name=request.project_name,
                location=request.location,
                project_type=request.project_type,
                federal_state=request.federal_state
            )
        except ValueError as e:
            raise HTTPException(
                status_code=500,
                detail=f"{str(e)} - Please set ANTHROPIC_API_KEY environment variable"
            )
        
        # Build context for cost estimation
        context = f"""
PROJEKT KOSTENSCH√ÑTZUNG:

Projektname: {request.project_name}
Standort: {request.location}
Geb√§udetyp: {request.project_type}
Bundesland: {request.federal_state}

GEB√ÑUDEDATEN:
- Gesamtfl√§che: {request.total_area_m2} m¬≤
- Anzahl R√§ume: {request.number_of_rooms or 'nicht angegeben'}
- Geb√§udeh√∂he: {request.building_height_m or 'nicht angegeben'} m
"""
        
        # AI Prompt f√ºr Kostensch√§tzung
        prompt = f"""{context}

Erstelle eine detaillierte Kostensch√§tzung f√ºr die Technische Geb√§udeausr√ºstung (TGA) nach DIN 276.

Berechne f√ºr jede Kostengruppe:

**KG 410 - Abwasser-, Wasser- und Gasanlagen**
- Ber√ºcksichtige: Sanit√§robjekte, Leitungen, Armaturen
- Richtwert: 80-120 ‚Ç¨/m¬≤ f√ºr {request.project_type}

**KG 420 - W√§rmeversorgungsanlagen**
- W√§rmeerzeugung, Verteilung, √úbergabe
- Richtwert: 120-180 ‚Ç¨/m¬≤ f√ºr {request.project_type}

**KG 430 - L√ºftungstechnische Anlagen**
- RLT-Anlagen, Kan√§le, Luftausl√§sse
- Richtwert: 100-150 ‚Ç¨/m¬≤ f√ºr {request.project_type}

**KG 434 - K√§ltetechnische Anlagen**
- Nur wenn erforderlich
- Richtwert: 60-100 ‚Ç¨/m¬≤ f√ºr {request.project_type}

**KG 440 - Elektroanlagen**
- Stromversorgung, Beleuchtung, IT
- Richtwert: 100-140 ‚Ç¨/m¬≤ f√ºr {request.project_type}

**KG 470 - Nutzungsspezifische Anlagen**
- Feuerl√∂schanlage, Sonderausstattung
- Richtwert: 20-40 ‚Ç¨/m¬≤ f√ºr {request.project_type}

**KG 480 - Geb√§udeautomation**
- DDC-System, Regelung, Visualisierung
- Richtwert: 30-50 ‚Ç¨/m¬≤ f√ºr {request.project_type}

WICHTIG:
1. Gib f√ºr JEDE Kostengruppe einen spezifischen ‚Ç¨-Betrag an (nicht nur Richtwerte)
2. Begr√ºnde die Wahl (einfacher/mittlerer/gehobener Standard)
3. Ber√ºcksichtige den Standort {request.federal_state} (Lohnniveau)
4. Ber√ºcksichtige den Geb√§udetyp {request.project_type}
5. Summiere am Ende die Gesamtkosten TGA (KG 400)

Format als JSON:
{{
  "kg_410": {{"betrag": 00000, "pro_m2": 000, "beschreibung": "..."}},
  "kg_420": {{"betrag": 00000, "pro_m2": 000, "beschreibung": "..."}},
  "kg_430": {{"betrag": 00000, "pro_m2": 000, "beschreibung": "..."}},
  "kg_434": {{"betrag": 00000, "pro_m2": 000, "beschreibung": "..."}},
  "kg_440": {{"betrag": 00000, "pro_m2": 000, "beschreibung": "..."}},
  "kg_470": {{"betrag": 00000, "pro_m2": 000, "beschreibung": "..."}},
  "kg_480": {{"betrag": 00000, "pro_m2": 000, "beschreibung": "..."}},
  "gesamt_kg_400": {{"betrag": 00000, "pro_m2": 000}},
  "genauigkeit": "¬±30% (Kostensch√§tzung nach LP2)",
  "hinweise": ["...", "..."]
}}
"""
        
        # Call Claude AI
        print("ü§ñ Calling Claude Sonnet 4.5 for cost estimation...")
        response = generator._call_claude(prompt, max_tokens=2000)
        
        # Parse JSON response
        import re
        
        # Extract JSON from response (might have markdown code blocks)
        json_match = re.search(r'\{[\s\S]*\}', response)
        if json_match:
            cost_data = json.loads(json_match.group(0))
        else:
            cost_data = {"error": "Could not parse AI response", "raw_response": response}
        
        print(f"\n{'='*60}")
        print(f"‚úÖ Cost Estimation Complete!")
        print(f"   Total: {cost_data.get('gesamt_kg_400', {}).get('betrag', 'N/A')} ‚Ç¨")
        print(f"{'='*60}\n")
        
        return {
            "success": True,
            "project_name": request.project_name,
            "total_area_m2": request.total_area_m2,
            "cost_estimation": cost_data,
            "generated_by": "Claude Sonnet 4.5",
            "disclaimer": "Kostensch√§tzung nach DIN 276, Genauigkeit ¬±30%, Stand LP2"
        }
        
    except json.JSONDecodeError as e:
        raise HTTPException(status_code=500, detail=f"Failed to parse AI response as JSON: {str(e)}")
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"Cost estimation error: {str(e)}")
